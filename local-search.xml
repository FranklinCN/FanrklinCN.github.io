<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【博客搭建】P2 主题配置</title>
    <link href="/2024/05/02/%E3%80%90%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%91P2-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/05/02/%E3%80%90%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%91P2-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>本章介绍搭如何自定义博客的主题，修改对应的主题配置项，让你的博客主题更加的符合您的个性。</p><span id="more"></span><blockquote><p>此教程运行系统环境为：“ Windows 10 1809 企业版 G 神州网信政府版 ”，使用其他系统的可能存在误差！</p></blockquote><blockquote><p>此教程仅供参考，不能作为资料考证！</p></blockquote><h1 id="【博客搭建】P2-主题配置"><a href="#【博客搭建】P2-主题配置" class="headerlink" title="【博客搭建】P2 主题配置"></a>【博客搭建】P2 主题配置</h1><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><blockquote><p>本文拿 Fluid 主题举例</p></blockquote><h3 id="方式1：使用-npm-包管理器安装"><a href="#方式1：使用-npm-包管理器安装" class="headerlink" title="方式1：使用 npm 包管理器安装"></a>方式1：使用 npm 包管理器安装</h3><ul><li>好处：方便更新，引用方便</li><li>缺点：容易失败，需要极好的网络环境（新手建议使用方式2）</li></ul><p>1、打开“ Git Bash ”（或“命令提示符”），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>2、在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去。（可以参考上一篇文章）</p><p>3、完毕！</p><hr><h3 id="方式2：从-GitHub-Release-下载"><a href="#方式2：从-GitHub-Release-下载" class="headerlink" title="方式2：从 GitHub  Release 下载"></a>方式2：从 GitHub  Release 下载</h3><ul><li>好处：操作方便，小白易上手</li><li>缺点：更新不便，需要极好的网络环境（建议使用 Steam++ 一类的加速器）</li></ul><ol><li>打开 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">GitHub Release （Fluid） </a> 。</li><li>下载 Release 中最新版的zip结尾的压缩包</li><li>解压至“ ./blog/theme/ ”</li><li>将解压后的文件夹改名为主题的名字（例如“fluid”）（文件夹内是散放的文件和文件夹，不能只是一个单独的文件夹）</li><li>应用主题（见上一篇文章）</li><li>完毕！</li></ol><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>根据上篇文章末尾的扩展部分，将主题配置文件放至根目录（详细请见上篇文章）。</p><p>每个主题都有专门的配置文档，例如“Fluid”的就是：<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">https://fluid-dev.github.io/hexo-fluid-docs/guide/</a></p><hr><h4 id="教程到此完毕！"><a href="#教程到此完毕！" class="headerlink" title="教程到此完毕！"></a>教程到此完毕！</h4>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
      <tag>Aurora Studio</tag>
      
      <tag>Markdown</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【博客搭建】P1 配置博客</title>
    <link href="/2024/05/02/%E3%80%90%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%91P1-%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/05/02/%E3%80%90%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%91P1-%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>本章介绍搭如何自定义博客，修改对应的配置项，让你的博客更加的个性。</p><span id="more"></span><blockquote><p>此教程运行系统环境为：“ Windows 10 1809 企业版 G 神州网信政府版 ”，使用其他系统的可能存在误差！</p></blockquote><blockquote><p>此教程仅供参考，不能作为资料考证！</p></blockquote><h1 id="【博客搭建】P1-配置博客"><a href="#【博客搭建】P1-配置博客" class="headerlink" title="【博客搭建】P1 配置博客"></a>【博客搭建】P1 配置博客</h1><h2 id="修改-Hexo-的默认配置"><a href="#修改-Hexo-的默认配置" class="headerlink" title="修改 Hexo 的默认配置"></a>修改 Hexo 的默认配置</h2><p>hexo 给出了丰富的自定义项，您可以根据以下来修改和自定义自己的博客：</p><h3 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支持多个关键词。</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td><code>url&#39;s pathname</code></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td><code>pretty_urls</code></td><td>改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td></td></tr><tr><td><code>pretty_urls.trailing_index</code></td><td>是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td><code>true</code></td></tr><tr><td><code>pretty_urls.trailing_html</code></td><td>是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td><code>true</code></td></tr></tbody></table><blockquote><p><strong>网站存放在子目录</strong></p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span><br></code></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>source_dir</code></td><td align="left">资源文件夹，这个文件夹用来存放内容。</td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>public_dir</code></td><td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td><td align="left"><code>public</code></td></tr><tr><td align="left"><code>tag_dir</code></td><td align="left">标签文件夹</td><td align="left"><code>tags</code></td></tr><tr><td align="left"><code>archive_dir</code></td><td align="left">归档文件夹</td><td align="left"><code>archives</code></td></tr><tr><td align="left"><code>category_dir</code></td><td align="left">分类文件夹</td><td align="left"><code>categories</code></td></tr><tr><td align="left"><code>code_dir</code></td><td align="left">Include code 文件夹，<code>source_dir</code> 下的子目录</td><td align="left"><code>downloads/code</code></td></tr><tr><td align="left"><code>i18n_dir</code></td><td align="left">国际化（i18n）文件夹</td><td align="left"><code>:lang</code></td></tr><tr><td align="left"><code>skip_render</code></td><td align="left">跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td><td align="left"></td></tr></tbody></table><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> <span class="hljs-string">&quot;mypage/**/*&quot;</span><br><span class="hljs-comment"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><br><span class="hljs-comment"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="hljs-attr">skip_render:</span> <span class="hljs-string">&quot;_posts/test-post.md&quot;</span><br><span class="hljs-comment"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><br></code></pre></td></tr></table></figure><blockquote><p>提示</p><p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>new_post_name</code></td><td align="left">新文章的文件名称</td><td align="left"><code>:title.md</code></td></tr><tr><td align="left"><code>default_layout</code></td><td align="left">预设布局</td><td align="left"><code>post</code></td></tr><tr><td align="left"><code>auto_spacing</code></td><td align="left">在中文和英文之间加入空格</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>titlecase</code></td><td align="left">把标题转换为 title case</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>external_link</code></td><td align="left">在新标签中打开链接</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>external_link.enable</code></td><td align="left">在新标签中打开链接</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>external_link.field</code></td><td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td align="left"><code>site</code></td></tr><tr><td align="left"><code>external_link.exclude</code></td><td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td><td align="left"><code>[]</code></td></tr><tr><td align="left"><code>filename_case</code></td><td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td><td align="left"><code>0</code></td></tr><tr><td align="left"><code>render_drafts</code></td><td align="left">显示草稿</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>post_asset_folder</code></td><td align="left">启用 <a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹</a></td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>relative_link</code></td><td align="left">把链接改为与根目录的相对位址</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>future</code></td><td align="left">显示未来的文章</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>syntax_highlighter</code></td><td align="left">代码块的设置, 请参考 <a href="https://hexo.io/zh-cn/docs/syntax-highlight">代码高亮</a> 进行设置</td><td align="left"><code>highlight.js</code></td></tr><tr><td align="left"><code>highlight</code></td><td align="left">代码块的设置, 请参考 <a href="https://hexo.io/zh-cn/docs/syntax-highlight#Highlight-js">Highlight.js</a> 进行设置</td><td align="left"></td></tr><tr><td align="left"><code>prismjs</code></td><td align="left">代码块的设置, 请参考 <a href="https://hexo.io/zh-cn/docs/syntax-highlight#PrismJS">PrismJS</a> 进行设置</td><td align="left"></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>，您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>default_category</code></td><td align="left">默认分类</td><td align="left"><code>uncategorized</code></td></tr><tr><td align="left"><code>category_map</code></td><td align="left">分类别名</td><td align="left"></td></tr><tr><td align="left"><code>tag_map</code></td><td align="left">标签别名</td><td align="left"></td></tr></tbody></table><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>date_format</code></td><td align="left">日期格式</td><td align="left"><code>YYYY-MM-DD</code></td></tr><tr><td align="left"><code>time_format</code></td><td align="left">时间格式</td><td align="left"><code>HH:mm:ss</code></td></tr><tr><td align="left"><code>updated_option</code></td><td align="left">当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td><td align="left"><code>mtime</code></td></tr></tbody></table><blockquote><p>updated_option</p><p><code>updated_option</code> 控制了当 Front Matter 中没有指定 <code>updated</code> 时，<code>updated</code> 如何取值：</p><ul><li><code>mtime</code>: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。</li><li><code>date</code>: 使用 <code>date</code> 作为 <code>updated</code> 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变</li><li><code>empty</code>: 直接删除 <code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li></ul><p><code>use_date_for_updated</code> 选项已经在 v7.0.0+ 中被移除。请改为使用 <code>updated_option: &#39;date&#39;</code>。</p></blockquote><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>per_page</code></td><td align="left">每页显示的文章量 (0 = 关闭分页功能)</td><td align="left"><code>10</code></td></tr><tr><td align="left"><code>pagination_dir</code></td><td align="left">分页目录</td><td align="left"><code>page</code></td></tr></tbody></table><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">&#x27;page&#x27;</span><br><span class="hljs-comment"># http://example.com/page/2</span><br><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">&#x27;awesome-page&#x27;</span><br><span class="hljs-comment"># http://example.com/awesome-page/2</span><br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>theme</code></td><td align="left">当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td align="left"><code>theme_config</code></td><td align="left">主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td></tr><tr><td align="left"><code>deploy</code></td><td align="left">部署部分的设置</td></tr><tr><td align="left"><code>meta_generator</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td></tr></tbody></table><h3 id="包括或不包括目录和文件"><a href="#包括或不包括目录和文件" class="headerlink" title="包括或不包括目录和文件"></a>包括或不包括目录和文件</h3><p>在 Hexo 配置文件中，通过设置 include/exclude 可以让 Hexo 进行处理或忽略某些目录和文件夹。你可以使用 <a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p><p><code>include</code> 和 <code>exclude</code> 选项只会应用到 <code>source/</code> ，而 <code>ignore</code> 选项会应用到所有文件夹.</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>include</code></td><td align="left">Hexo 默认会不包括 <code>source/</code> 下的文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，Hexo 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td></tr><tr><td align="left"><code>exclude</code></td><td align="left">Hexo 不包括 <code>source/</code> 下的这些文件和目录</td></tr><tr><td align="left"><code>ignore</code></td><td align="left">Hexo 会忽略整个 Hexo 项目下的这些文件夹或文件</td></tr></tbody></table><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 处理或不处理目录或文件</span><br><span class="hljs-attr">include:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;.nojekyll&quot;</span><br>  <span class="hljs-comment"># 处理 &#x27;source/css/_typing.css&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;css/_typing.css&quot;</span><br>  <span class="hljs-comment"># 处理 &#x27;source/_css/&#x27; 中的任何文件，但不包括子目录及其其中的文件。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;_css/*&quot;</span><br>  <span class="hljs-comment"># 处理 &#x27;source/_css/&#x27; 中的任何文件和子目录下的任何文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;_css/**/*&quot;</span><br><br><span class="hljs-attr">exclude:</span><br>  <span class="hljs-comment"># 不处理 &#x27;source/js/test.js&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;js/test.js&quot;</span><br>  <span class="hljs-comment"># 不处理 &#x27;source/js/&#x27; 中的文件、但包括子目录下的所有目录和文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;js/*&quot;</span><br>  <span class="hljs-comment"># 不处理 &#x27;source/js/&#x27; 中的文件和子目录下的任何文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;js/**/*&quot;</span><br>  <span class="hljs-comment"># 不处理 &#x27;source/js/&#x27; 目录下的所有文件名以 &#x27;test&#x27; 开头的文件，但包括其它文件和子目录下的单文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;js/test*&quot;</span><br>  <span class="hljs-comment"># 不处理 &#x27;source/js/&#x27; 及其子目录中任何以 &#x27;test&#x27; 开头的文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;js/**/test*&quot;</span><br>  <span class="hljs-comment"># 不要用 exclude 来忽略 &#x27;source/_posts/&#x27; 中的文件。你应该使用 &#x27;skip_render&#x27;，或者在要忽略的文件的文件名之前加一个下划线 &#x27;_&#x27;</span><br>  <span class="hljs-comment"># 在这里配置一个 - &quot;_posts/hello-world.md&quot; 是没有用的。</span><br><br><span class="hljs-attr">ignore:</span><br>  <span class="hljs-comment"># 忽略任何一个名叫 &#x27;foo&#x27; 的文件夹</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;**/foo&quot;</span><br>  <span class="hljs-comment"># 只忽略 &#x27;themes/&#x27; 下的 &#x27;foo&#x27; 文件夹</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;**/themes/*/foo&quot;</span><br>  <span class="hljs-comment"># 对 &#x27;themes/&#x27; 目录下的每个文件夹中忽略名叫 &#x27;foo&#x27; 的子文件夹</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;**/themes/**/foo&quot;</span><br></code></pre></td></tr></table></figure><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以使用 <code>ignore</code> 或在文件名之前添加下划线 <code>_</code>。</p><ul><li><code>source/_posts</code> 文件夹是一个例外，但该文件夹下任何名称以 <code>_</code> 开头的文件或文件夹仍会被忽略。不建议在该文件夹中使用 <code>include</code> 规则。</li></ul><h3 id="使用代替主题配置文件"><a href="#使用代替主题配置文件" class="headerlink" title="使用代替主题配置文件"></a>使用代替主题配置文件</h3><p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 <code>_config.yml</code> 配置文件。</p><p>除了自行维护独立的主题配置文件，你也可以在其它地方对主题进行配置。</p><p><strong>配置文件中的 <code>theme_config</code></strong></p><blockquote><p>该特性自 Hexo 2.8.2 起提供</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&quot;my-theme&quot;</span><br><span class="hljs-attr">theme_config:</span><br>  <span class="hljs-attr">bio:</span> <span class="hljs-string">&quot;My awesome bio&quot;</span><br>  <span class="hljs-attr">foo:</span><br>    <span class="hljs-attr">bar:</span> <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment"># themes/my-theme/_config.yml</span><br><span class="hljs-attr">bio:</span> <span class="hljs-string">&quot;Some generic bio&quot;</span><br><span class="hljs-attr">logo:</span> <span class="hljs-string">&quot;a-cool-image.png&quot;</span><br>  <span class="hljs-attr">foo:</span><br>    <span class="hljs-attr">baz:</span> <span class="hljs-string">&#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">bio:</span> <span class="hljs-string">&quot;My awesome bio&quot;</span>,<br>  <span class="hljs-attr">logo:</span> <span class="hljs-string">&quot;a-cool-image.png&quot;</span>,<br>  <span class="hljs-attr">foo:</span> &#123;<br>    <span class="hljs-attr">bar:</span> <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">baz:</span> <span class="hljs-string">&quot;b&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>独立的 <code>_config.[theme].yml</code> 文件</strong>（推荐）</p><blockquote><p>该特性自 Hexo 5.0.0 起提供</p></blockquote><p>独立的主题配置文件应放置于站点根目录下，支持 <code>yml</code> 或 <code>json</code> 格式。需要配置站点 <code>_config.yml</code> 文件中的 <code>theme</code> 以供 Hexo 寻找 <code>_config.[theme].yml</code> 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&quot;my-theme&quot;</span><br><span class="hljs-comment"># _config.my-theme.yml</span><br><span class="hljs-attr">bio:</span> <span class="hljs-string">&quot;My awesome bio&quot;</span><br><span class="hljs-attr">foo:</span><br>  <span class="hljs-attr">bar:</span> <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment"># themes/my-theme/_config.yml</span><br><span class="hljs-attr">bio:</span> <span class="hljs-string">&quot;Some generic bio&quot;</span><br><span class="hljs-attr">logo:</span> <span class="hljs-string">&quot;a-cool-image.png&quot;</span><br>  <span class="hljs-attr">foo:</span><br>    <span class="hljs-attr">baz:</span> <span class="hljs-string">&#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">bio:</span> <span class="hljs-string">&quot;My awesome bio&quot;</span>,<br>  <span class="hljs-attr">logo:</span> <span class="hljs-string">&quot;a-cool-image.png&quot;</span>,<br>  <span class="hljs-attr">foo:</span> &#123;<br>    <span class="hljs-attr">bar:</span> <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-attr">baz:</span> <span class="hljs-string">&quot;b&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>强烈建议你将所有的主题配置集中在一处。如果你不得不在多处配置你的主题，那么这些信息对你将会非常有用：Hexo 在合并主题配置时，Hexo 配置文件中的 <code>theme_config</code> 的优先级最高，其次是 <code>_config.[theme].yml</code> 文件，最后是位于主题目录下的 <code>_config.yml</code> 文件。</p></blockquote><p>部分内容摘选自<a href="https://hexo.io/zh-cn/docs/configuration">Hexo官方文档</a>。</p><hr><h4 id="教程到此完毕！"><a href="#教程到此完毕！" class="headerlink" title="教程到此完毕！"></a>教程到此完毕！</h4>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
      <tag>Aurora Studio</tag>
      
      <tag>Markdown</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【博客搭建】P0 环境准备</title>
    <link href="/2024/05/01/%E3%80%90%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%91P0-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <url>/2024/05/01/%E3%80%90%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%91P0-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>本章介绍搭建一个博客前，所需要的运行环境（Node.js &amp; git），并初步部署了一个博客。</p><span id="more"></span><blockquote><p>此教程运行系统环境为：“ Windows 10 1809 企业版 G 神州网信政府版 ”，使用其他系统的可能存在误差！</p></blockquote><blockquote><p>此教程仅供参考，不能作为资料考证！</p></blockquote><h1 id="【博客搭建】P0-环境准备"><a href="#【博客搭建】P0-环境准备" class="headerlink" title="【博客搭建】P0 环境准备"></a>【博客搭建】P0 环境准备</h1><p>在搭建属于自己的博客之前，请先在您的计算机中安装以下软件：</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="什么是“-Node，js-”？"><a href="#什么是“-Node，js-”？" class="headerlink" title="什么是“ Node，js ”？"></a>什么是“ Node，js ”？</h3><p>Node.js 是一种开源与跨平台的 JavaScript 的运行环境，能够使得javascript脱离浏览器运行。 它是一个可用于几乎任何项目的流行工具，允许我们通过JavaScript和一系列模块来编写服务器端应用和网络相关的应用。</p><p>核心模块包括文件系统I/O、网络（HTTP、TCP、UDP、DNS、TLS/SSL等）、二进制数据流、加密算法、数据流等等。Node模块的API形式简单，降低了编程的复杂度。</p><p>使用框架可以加速开发。常用的框架有Express.js、<a href="http://socket.io和connect等.node.js的程序可以在microsoft/">http://Socket.IO和Connect等。Node.js的程序可以在Microsoft</a> Windows、Linux、Unix、Mac OS X等服务器上运行。Node.js也可以使用TypeScript（强化了数据类型的JavaScript变体）、Dart语言，以及其他能够编译成JavaScript的语言编程。</p><p>Node.js主要用于编写像Web服务器一样的网络应用，这和PHP和Python是类似的。但是Node.js与其他语言最大的不同之处在于，PHP等语言是阻塞的（只有前一条命令执行完毕才会执行后面的命令），而Node.js是非阻塞的（多条命令可以同时被运行，通过回调函数得知命令已结束运行）。</p><p>Node.js是事件驱动的。开发者可以在不使用线程的情况下开发出一个能够承载高并发的服务器。其他服务器端语言难以开发高并发应用，而且即使开发出来，性能也不尽如人意。Node.js正是在这个前提下被创造出来。Node.js把JavaScript的易学易用和Unix网络编程的强大结合到了一起。</p><h6 id="本教程中，Node-js-为博客框架的依赖作用。"><a href="#本教程中，Node-js-为博客框架的依赖作用。" class="headerlink" title="本教程中，Node.js 为博客框架的依赖作用。"></a>本教程中，Node.js 为博客框架的依赖作用。</h6><h3 id="下载与安装“-Node-js-”"><a href="#下载与安装“-Node-js-”" class="headerlink" title="下载与安装“ Node.js ”"></a>下载与安装“ Node.js ”</h3><blockquote><p>请选择适合自己操作系统的安装包。</p></blockquote><p>官方链接：<a href="https://nodejs.org/en">点击此处前往下载</a></p><h2 id="安装“-Git-”"><a href="#安装“-Git-”" class="headerlink" title="安装“ Git ”"></a>安装“ Git ”</h2><h3 id="什么是“-Git-”？"><a href="#什么是“-Git-”？" class="headerlink" title="什么是“ Git ”？"></a>什么是“ Git ”？</h3><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。<br>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper</p><h6 id="本教程中，Git-存在部署和安装框架的作用。"><a href="#本教程中，Git-存在部署和安装框架的作用。" class="headerlink" title="本教程中，Git 存在部署和安装框架的作用。"></a>本教程中，Git 存在部署和安装框架的作用。</h6><h3 id="下载与安装“-Git-”"><a href="#下载与安装“-Git-”" class="headerlink" title="下载与安装“ Git ”"></a>下载与安装“ Git ”</h3><blockquote><p>请选择适合自己操作系统的安装包。</p></blockquote><p>官方链接：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">点击此处前往下载</a></p><h2 id="安装“-Hexo-”"><a href="#安装“-Hexo-”" class="headerlink" title="安装“ Hexo ”"></a>安装“ Hexo ”</h2><h3 id="什么是“-Hexo-”？"><a href="#什么是“-Hexo-”？" class="headerlink" title="什么是“ Hexo ”？"></a>什么是“ Hexo ”？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h6 id="本教程中，Hexo-为博客框架。"><a href="#本教程中，Hexo-为博客框架。" class="headerlink" title="本教程中，Hexo 为博客框架。"></a>本教程中，Hexo 为博客框架。</h6><h3 id="部署“-Hexo-”"><a href="#部署“-Hexo-”" class="headerlink" title="部署“ Hexo ”"></a>部署“ Hexo ”</h3><blockquote><p>以下命令行建议在“ Git Bash ”中执行。建议使用 npm 包管理器。</p></blockquote><ol><li><p>打开“ Git Bash ”（或“命令提示符”）</p></li><li><p>在“ Got Bash ”（或“命令提示符”）中依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server<br></code></pre></td></tr></table></figure></li><li><p>完毕！</p></li></ol><hr><h4 id="教程到此完毕！"><a href="#教程到此完毕！" class="headerlink" title="教程到此完毕！"></a>教程到此完毕！</h4>]]></content>
    
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
      <tag>Aurora Studio</tag>
      
      <tag>Markdown</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
